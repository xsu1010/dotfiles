set -g default-terminal "xterm-256color"
set -as terminal-features ",xterm-256color:RGB"
set-option -g default-shell /usr/bin/zsh

# Set vim keys
setw -g mode-keys vi

# Change prefix
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Change split keybinds
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %
bind C-p previous-window
bind C-n next-window
unbind p
unbind n

# reload on r
bind r source-file ~/.tmux.conf

# Increase scrollback buffer size
set -g history-limit 50000

# Refresh statuses more often
set -g status-interval 5

# Enable focus events
set -g focus-events on

# Stop renaming windows
set-option -g allow-rename off

# Theming

## Window status/separators

### Window separators
set -g @catppuccin_window_separator " "
set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator ""
set -g @catppuccin_window_middle_separator "█  "
set -g @catppuccin_window_number_position "left"
set -g @catppuccin_window_status_enable "yes"
set -g @catppuccin_window_status_icon_enable "yes"
set -g @catppuccin_status_connect_separator "no"
set -g @catppuccin_window_status_format "#I:#F#W"

### Window separators colors 
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_color "#{thm_fg}" # text color
set -g @catppuccin_window_default_background "#{thm_gray}"
set -g @catppuccin_window_default_text "#W" # use "#W" for application instead of directory
set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_color "#{thm_blue}" # text color
set -g @catppuccin_window_current_background "#{thm_gray}"
set -g @catppuccin_window_current_text "#W" # use "#W" for application instead of directory

### Window icons
set -g @catppuccin_icon_window_last " "
set -g @catppuccin_icon_window_current " "
set -g @catppuccin_icon_window_zoom "󰁌 "
set -g @catppuccin_icon_window_mark "󰃀 "
set -g @catppuccin_icon_window_silent "󰂛 "
set -g @catppuccin_icon_window_activity "󱅫 "
set -g @catppuccin_icon_window_bell "󰂞 "

## Pane status
set -g @catppuccin_pane_status_enabled "no"
set -g @catppuccin_pane_border_status "off" # See `pane-border-status`
set -g @catppuccin_pane_left_separator "█"
set -g @catppuccin_pane_right_separator "█"
set -g @catppuccin_pane_middle_separator "█"
set -g @catppuccin_pane_number_position "left"
set -g @catppuccin_pane_default_fill "number"
set -g @catppuccin_pane_default_text "#{b:pane_current_path}"
set -g @catppuccin_pane_border_style "fg=#{thm_blue}"
set -g @catppuccin_pane_active_border_style "fg=#{thm_blue}"
set -g @catppuccin_pane_color "#{thm_blue}"
set -g @catppuccin_pane_background_color "#{thm_bg}"

## Status bar
set -g @catppuccin_status_default "2"
set -g @catppuccin_status_background "theme"
set -g @catppuccin_status_left_separator  " "
set -g @catppuccin_status_right_separator ""
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_justify "left"

### Adding an invisible line on top so that it doesn't look glued to nvim
set -g 'status-format[1]' ''
set -Fg 'status-format[0]' '#{status-format[0]}'

## Status bar modules
# set -g @catppuccin_status_modules_left ""
set -g @catppuccin_status_modules_right "gitmux cpu battery date_time"
set -g @catppuccin_battery_text "#{battery_percentage}"
set -g @catppuccin_date_time_text "%H:%M"
set -g @catppuccin_gitmux_color "#{thm_fg}"


# Scrolling
setw -g mouse on

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows
set-option -g renumber-windows on

# Statusline location
set -g status-position top

# Current window name bold
set -g window-status-current-style fg=terminal,bold

# Time settings
set -g status-right "%I:%M %p, %d-%b-%y, %a"

# Increase left length
set -g status-left-length 20

# Keymaps
# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# Smart pane switching with awareness of Neovim splits.
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'

# Alternatively, if you want to disable wrapping when moving in non-neovim panes, use these bindings
# bind-key -n C-h if -F '#{@pane-is-vim}' { send-keys C-h } { if -F '#{pane_at_left}'   '' 'select-pane -L' }
# bind-key -n C-j if -F '#{@pane-is-vim}' { send-keys C-j } { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
# bind-key -n C-k if -F '#{@pane-is-vim}' { send-keys C-k } { if -F '#{pane_at_top}'    '' 'select-pane -U' }
# bind-key -n C-l if -F '#{@pane-is-vim}' { send-keys C-l } { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Smart pane resizing with awareness of Neovim splits.
bind-key -n M-h if -F "#{@pane-is-vim}" 'send-keys M-h' 'resize-pane -L 3'
bind-key -n M-j if -F "#{@pane-is-vim}" 'send-keys M-j' 'resize-pane -D 3'
bind-key -n M-k if -F "#{@pane-is-vim}" 'send-keys M-k' 'resize-pane -U 3'
bind-key -n M-l if -F "#{@pane-is-vim}" 'send-keys M-l' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# List of plugins
set -g @plugin 'catppuccin/tmux#v0.2.0'
set -g @catppuccin_flavor 'macchiato' # latte,frappe, macchiato or mocha
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

